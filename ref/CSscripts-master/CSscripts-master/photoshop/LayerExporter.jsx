// (c) Copyright 2013 Adobe Systems, Inc. All rights reserved.// author David Deraedt#include "../common/Utils.jsx"var LayerExporter = (function () {	/**	Exports all layers of a given document to properly sized PNG files	@public	@param {Document} doc The document to export	@param {Folder} destFolder The destination folder for the image files	*/	function exportDocLayers(doc, destFolder){				var destPath = destFolder.path +"/"+ destFolder.name+"/";		var docName = normalizeName(getFileNamePart(doc.name));						exportLayers(doc.layers, destPath, docName);			}	function exportLayers(layers, destPath, prefix){										var n = layers.length;				var j;				for ( j = 0 ; j < n ; j++){						var l = layers[j];						var fileName = prefix + "-" + normalizeName(l.name);						log(l.name);						// ignore invisible			if(l.visible == false) continue;						//groups			if(l instanceof ArtLayer==false) {				exportLayers(l.layers, destPath, prefix);				continue;			}							if(l.kind == LayerKind.SOLIDFILL) {				l.rasterize (RasterizeType.SHAPE);			}			// ignore adjustment layers and other weird stuffs I don't get			else if(l.kind != LayerKind.NORMAL && l.kind != LayerKind.TEXT) {				log(l.name + " ignored because kind is " + l.kind);				continue;			}									// ignore empty			if(l.bounds[2]==0) continue;						app.activeDocument.activeLayer = l;											exportImage(app.activeDocument, l, destPath, fileName);		}	}	function exportImage(doc, l, destPath, fileName) {				selectVisibleIn (l);		doc.selection.copy();		var bounds = doc.selection.bounds;		var x = bounds[0].value;		var y = bounds[1].value;		var w = bounds[2].value - x;		var h = bounds[3].value - y;					var newDoc = app.documents.add(w, h, 72, l.name, NewDocumentMode.RGB, DocumentFill.TRANSPARENT);			newDoc.paste();				var pngSaveOptions = new PNGSaveOptions();		var saveFile = new File (destPath + fileName + ".png");		newDoc.saveAs(saveFile, pngSaveOptions, true, Extension.LOWERCASE);		newDoc.close(SaveOptions.DONOTSAVECHANGES);		newDoc = null;	}	var obj = {};	obj.exportDocLayers = exportDocLayers;	return obj;}());